import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import Portfolio from './Portfolio';
import themeReducer from '../redux/slices/themeSlice';
import authReducer from '../redux/slices/authSlice';

// Mock the fetch calls
global.fetch = vi.fn(() =>
  Promise.resolve({
    ok: true,
    json: () => Promise.resolve([
      { portfolioid: '1', name: 'Portfolio 1', assets: [] },
      { portfolioid: '2', name: 'Portfolio 2', assets: [] },
    ]),
  })
);

// Mock the redux store
const store = configureStore({
  reducer: {
    theme: themeReducer,
    auth: authReducer,
  },
  preloadedState: {
    theme: { isDarkMode: false },
    auth: { isAuthenticated: true, user: { name: 'Test User' } },
  },
});

describe('Portfolio Component', () => {
  beforeEach(() => {
    fetch.mockClear();
  });

  test('renders without crashing', async () => {
    render(
      <Provider store={store}>
        <Portfolio />
      </Provider>
    );

    expect(screen.getByText('Portfolio 1')).toBeTruthy();
    await waitFor(() => expect(fetch).toHaveBeenCalledTimes(1));
  });

  test('displays authentication error when not authenticated', async () => {
    const authStore = configureStore({
      reducer: {
        theme: themeReducer,
        auth: authReducer,
      },
      preloadedState: {
        theme: { isDarkMode: false },
        auth: { isAuthenticated: false, user: null },
      },
    });

    render(
      <Provider store={authStore}>
        <Portfolio />
      </Provider>
    );

    expect(screen.getByText('You are not authenticated')).toBeTruthy();
  });

  test('changes dark mode correctly', async () => {
    const darkModeStore = configureStore({
      reducer: {
        theme: themeReducer,
        auth: authReducer,
      },
      preloadedState: {
        theme: { isDarkMode: true },
        auth: { isAuthenticated: true, user: { name: 'Test User' } },
      },
    });

    render(
      <Provider store={darkModeStore}>
        <Portfolio />
      </Provider>
    );

    expect(screen.getByText('Portfolio 1')).toBeTruthy();
    expect(screen.getByText('Portfolio 2')).toBeTruthy();
    const portfolio1 = screen.getByText('Portfolio 1').closest('div');
    expect(portfolio1).not.toBeNull();
    expect(portfolio1.classList.contains('bg-black')).toBe(true);
  });

  test('selects and displays portfolio details', async () => {
    render(
      <Provider store={store}>
        <Portfolio />
      </Provider>
    );

    await waitFor(() => expect(fetch).toHaveBeenCalledTimes(1));

    const portfolio1 = screen.getByText('Portfolio 1');
    fireEvent.click(portfolio1);

    await waitFor(() => {
      expect(screen.getByText('Portfolio 1')).toBeTruthy();
      // Add assertions to check if the portfolio details are displayed
    });
  });
});