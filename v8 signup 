import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { createMemoryHistory } from 'history';
import { Router } from 'react-router-dom';
import SignUp from './SignUp'; // Adjust the import path as needed
import { vi } from 'vitest';

describe('SignUp component', () => {
  it('renders SignUp component correctly', () => {
    render(
      <Router history={createMemoryHistory()}>
        <SignUp />
      </Router>
    );

    expect(screen.getByText('Create Account')).toBeInTheDocument();
    expect(screen.getByText('Please fill in the details to create your account.')).toBeInTheDocument();
    expect(screen.getByLabelText('First Name')).toBeInTheDocument();
    expect(screen.getByLabelText('Last Name')).toBeInTheDocument();
    expect(screen.getByLabelText('Date of Birth')).toBeInTheDocument();
    expect(screen.getByLabelText('Email')).toBeInTheDocument();
    expect(screen.getByLabelText('Password')).toBeInTheDocument();
  });

  it('handles input changes correctly', () => {
    render(
      <Router history={createMemoryHistory()}>
        <SignUp />
      </Router>
    );

    const firstNameInput = screen.getByPlaceholderText('Enter your first name');
    const lastNameInput = screen.getByPlaceholderText('Enter your last name');
    const dobInput = screen.getByPlaceholderText('Enter your date of birth');
    const emailInput = screen.getByPlaceholderText('Enter your email');
    const passwordInput = screen.getByPlaceholderText('Enter your password');

    fireEvent.change(firstNameInput, { target: { value: 'John' } });
    fireEvent.change(lastNameInput, { target: { value: 'Doe' } });
    fireEvent.change(dobInput, { target: { value: '1990-01-01' } });
    fireEvent.change(emailInput, { target: { value: 'john.doe@example.com' } });
    fireEvent.change(passwordInput, { target: { value: 'password' } });

    expect(firstNameInput.value).toBe('John');
    expect(lastNameInput.value).toBe('Doe');
    expect(dobInput.value).toBe('1990-01-01');
    expect(emailInput.value).toBe('john.doe@example.com');
    expect(passwordInput.value).toBe('password');
  });

  it('toggles password visibility', () => {
    render(
      <Router history={createMemoryHistory()}>
        <SignUp />
      </Router>
    );

    const passwordInput = screen.getByPlaceholderText('Enter your password');
    const toggleButton = screen.getByRole('button', { name: /eye/i });

    // Initial state: password is hidden
    expect(passwordInput.type).toBe('password');

    // Click to show password
    userEvent.click(toggleButton);
    expect(passwordInput.type).toBe('text');

    // Click again to hide password
    userEvent.click(toggleButton);
    expect(passwordInput.type).toBe('password');
  });

  it('submits form and navigates on successful sign up', async () => {
    const history = createMemoryHistory();
    global.fetch = vi.fn(() =>
      Promise.resolve({
        status: 200,
        json: () => Promise.resolve({ message: 'Success' }),
      })
    );

    render(
      <Router history={history}>
        <SignUp />
      </Router>
    );

    const firstNameInput = screen.getByPlaceholderText('Enter your first name');
    const lastNameInput = screen.getByPlaceholderText('Enter your last name');
    const dobInput = screen.getByPlaceholderText('Enter your date of birth');
    const emailInput = screen.getByPlaceholderText('Enter your email');
    const passwordInput = screen.getByPlaceholderText('Enter your password');
    const submitButton = screen.getByRole('button', { name: /sign up/i });

    fireEvent.change(firstNameInput, { target: { value: 'John' } });
    fireEvent.change(lastNameInput, { target: { value: 'Doe' } });
    fireEvent.change(dobInput, { target: { value: '1990-01-01' } });
    fireEvent.change(emailInput, { target: { value: 'john.doe@example.com' } });
    fireEvent.change(passwordInput, { target: { value: 'password' } });

    userEvent.click(submitButton);

    await waitFor(() => {
      expect(global.fetch).toHaveBeenCalledTimes(1);
      expect(global.fetch).toHaveBeenCalledWith(
        `${import.meta.env?.VITE_BACKEND_URL}/auth/signup`,
        expect.objectContaining({
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            firstName: 'John',
            lastName: 'Doe',
            dob: '1990-01-01',
            email: 'john.doe@example.com',
            password: 'password',
          }),
        })
      );
    });

    await waitFor(() => {
      expect(screen.getByText('Create Account')).not.toBeInTheDocument();
    });
  });
});