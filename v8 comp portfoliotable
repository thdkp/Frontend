import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider, useSelector, useDispatch } from 'react-redux';
import { MemoryRouter, Route, Routes, useNavigate } from 'react-router-dom';
import PortfolioTable from './PortfolioTable'; // Adjust the import path as needed
import { vi } from 'vitest';

// Mock the react-redux useSelector and useDispatch hooks
vi.mock('react-redux', () => {
  const actualReactRedux = vi.importActual('react-redux');
  return {
    ...actualReactRedux,
    useSelector: vi.fn(),
    useDispatch: vi.fn(),
  };
});

// Mock the react-router-dom components and hooks
vi.mock('react-router-dom', () => {
  const actualReactRouterDom = vi.importActual('react-router-dom');
  return {
    ...actualReactRouterDom,
    useNavigate: vi.fn(),
});

describe('PortfolioTable component', () => {
  const mockPortfolios = [
    { portfolioid: 1, name: 'Portfolio 1', profitLoss: 100, capital: 1000, worth: 1100 },
    { portfolioid: 2, name: 'Portfolio 2', profitLoss: -50, capital: 500, worth: 450 }
  ];

  const mockUser = {
    id: 1,
    name: 'John Doe',
    email: 'john.doe@example.com'
  };

  const mockStore = {
    getState: () => ({
      auth: {
        isAuthenticated: true,
        user: mockUser
      }
    }),
    subscribe: () => {},
    dispatch: () => {}
  };

  const notAuthenticatedStore = {
    getState: () => ({
      auth: {
        isAuthenticated: false,
        user: null
      }
    }),
    subscribe: () => {},
    dispatch: () => {}
  };

  beforeEach(() => {
    useSelector.mockImplementation((selector) => selector(mockStore.getState()));
    useDispatch.mockImplementation(() => mockStore.dispatch);
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  it('renders portfolio table correctly when authenticated', () => {
    render(
      <Provider store={mockStore}>
        <MemoryRouter>
          <Routes>
            <Route path="/" element={<PortfolioTable portfolios={mockPortfolios} onSelectPortfolio={() => {}} />} />
          </Routes>
        </MemoryRouter>
      </Provider>
    );

    // Check if table header and rows are rendered
    expect(screen.getByText('Portfolio Table')).toBeInTheDocument();
    expect(screen.getByText('Profit/Loss')).toBeInTheDocument();
    expect(screen.getByText('Invested')).toBeInTheDocument();
    expect(screen.getByText('Portfolio Worth')).toBeInTheDocument();

    // Check if portfolio data is correctly rendered
    mockPortfolios.forEach(portfolio => {
      expect(screen.getByText(portfolio.name)).toBeInTheDocument();
      expect(screen.getByText(portfolio.profitLoss.toString())).toBeInTheDocument();
      expect(screen.getByText(portfolio.capital.toString())).toBeInTheDocument();
      expect(screen.getByText(portfolio.worth.toString())).toBeInTheDocument();
    });
  });

  it('filters portfolios based on search input', () => {
    render(
      <Provider store={mockStore}>
        <MemoryRouter>
          <Routes>
            <Route path="/" element={<PortfolioTable portfolios={mockPortfolios} onSelectPortfolio={() => {}} />} />
          </Routes>
        </MemoryRouter>
      </Provider>
    );

    // Type in the search input and check if filtering works
    const searchInput = screen.getByPlaceholderText('Search by name');
    fireEvent.change(searchInput, { target: { value: 'Portfolio 1' } });

    expect(screen.getByText('Portfolio 1')).toBeInTheDocument();
    expect(screen.queryByText('Portfolio 2')).not.toBeInTheDocument();
  });

  it('renders authentication error when not authenticated', () => {
    useSelector.mockImplementation((selector) => selector(notAuthenticatedStore.getState()));

    render(
      <Provider store={notAuthenticatedStore}>
        <MemoryRouter>
          <Routes>
            <Route path="/" element={<PortfolioTable portfolios={mockPortfolios} onSelectPortfolio={() => {}} />} />
          </Routes>
        </MemoryRouter>
      </Provider>
    );

    // Check if authentication error component is rendered
    expect(screen.getByText('Authentication Error')).toBeInTheDocument();
  });
});