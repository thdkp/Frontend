import React from 'react';
import { render, screen } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { useSelector } from 'react-redux';
import GetStarted from '../GetStarted';

// Mock useSelector behavior
const mockUseSelector = (selector) => selector({
  // Simulate Redux store state here
  auth: {
    isDarkMode: true, // Set isDarkMode to true for dark mode test
  }
});

vi('GetStarted', () => {
  it('renders correctly in dark mode', () => {
    // Mock useSelector to return state with isDarkMode: true
    useSelector.mockImplementation(mockUseSelector);

    render(<GetStarted />);

    // Assert elements rendered in dark mode
    const container = screen.getByTestId('get-started-container');
    expect(container).toHaveClass('bg-white'); // Assuming bg-white is applied for dark mode
  });

  it('renders correctly in light mode', () => {
    // Mock useSelector to return state with isDarkMode: false
    useSelector.mockImplementation(() => ({
      auth: {
        isDarkMode: false,
      }
    }));

    render(<GetStarted />);

    // Assert elements rendered in light mode
    const container = screen.getByTestId('get-started-container');
    expect(container).toHaveClass('bg-gray'); // Assuming bg-gray is applied for light mode
  });

  it('redirects to signin page on button click', () => {
    // Mock useSelector to return state with isDarkMode: true
    useSelector.mockImplementation(mockUseSelector);

    render(<GetStarted />);

    // Simulate click on the Start button
    const startButton = screen.getByText(/Start/i);
    expect(startButton).toBeInTheDocument();
    startButton.click();

    // Assert navigation to /signin
    expect(window.location.pathname).toBe('/signin');
  });
});