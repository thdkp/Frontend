import React from 'react';
import { render, screen } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import GetStarted from '../GetStarted';
import { useSelector } from 'react-redux';

// Mock useSelector from react-redux
const mockUseSelector = (selectorFn) => selectorFn();

vi('GetStarted', () => {
  it('renders correctly', async () => {
    // Mock useSelector to return false for isDarkMode
    useSelector.mockImplementation(mockUseSelector);

    render(<GetStarted />);

    // Check if elements are rendered correctly
    expect(screen.getByText(/Get started/i)).toBeInTheDocument();
    expect(screen.getByText(/Track your portfolio/i)).toBeInTheDocument();
    expect(screen.getByText(/Create custom portfolios in a few clicks/i)).toBeInTheDocument();
    expect(screen.getByText(/Use multiple visualization tools/i)).toBeInTheDocument();
    expect(screen.getByText(/Rebalance your portfolios/i)).toBeInTheDocument();
    expect(screen.getByText(/Start/i)).toBeInTheDocument();
  });

  it('renders correctly in dark mode', () => {
    // Mock useSelector to return true for isDarkMode
    useSelector.mockImplementation(() => true);

    render(<GetStarted />);

    // Check if dark mode class is applied
    const container = screen.getByTestId('get-started-container');
    expect(container).toHaveClass('bg-white');
  });

  it('renders correctly in light mode', () => {
    // Mock useSelector to return false for isDarkMode
    useSelector.mockImplementation(() => false);

    render(<GetStarted />);

    // Check if light mode class is applied
    const container = screen.getByTestId('get-started-container');
    expect(container).toHaveClass('bg-gray');
  });

  it('redirects to signin page on button click', () => {
    // Mock useSelector to return false for isDarkMode
    useSelector.mockImplementation(mockUseSelector);

    render(<GetStarted />);

    // Check if clicking the Start button navigates to /signin
    const startButton = screen.getByText(/Start/i);
    expect(startButton).toBeInTheDocument();
    expect(startButton.closest('a')).toHaveAttribute('href', '/signin');
  });
});