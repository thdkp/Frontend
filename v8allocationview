// AllocationView.test.jsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import '@testing-library/jest-dom';
import AllocationView from './AllocationView';
import AuthError from './AuthError';

// Mock data
const mockData = {
  informationTechnology: 10,
  healthCare: 15,
  financials: 20,
  consumerDiscretionary: 5,
  communicationServices: 10,
  industrials: 10,
  consumerStaples: 5,
  energy: 5,
  utilities: 10,
  realEstate: 5,
  material: 5,
};

// Simple reducer for authentication state
const authReducer = (state = { isAuthenticated: false }, action) => {
  switch (action.type) {
    case 'LOGIN':
      return { isAuthenticated: true };
    case 'LOGOUT':
      return { isAuthenticated: false };
    default:
      return state;
  }
};

// Helper function to render with redux
const renderWithRedux = (component, { initialState, store = createStore(authReducer, initialState) } = {}) => {
  return {
    ...render(<Provider store={store}><BrowserRouter>{component}</BrowserRouter></Provider>),
    store,
  };
};

describe('AllocationView Component', () => {
  test('renders AllocationView when authenticated', () => {
    renderWithRedux(<AllocationView data={mockData} />, {
      initialState: { isAuthenticated: true },
    });

    expect(screen.getByText("Allocation View")).toBeInTheDocument();
    expect(screen.getByText("Financials accounts for 20% of your portfolio.")).toBeInTheDocument();
    expect(screen.getByText("You can read our guide on diversification")).toBeInTheDocument();
  });

  test('renders AuthError when not authenticated', () => {
    renderWithRedux(<AllocationView data={mockData} />, {
      initialState: { isAuthenticated: false },
    });

    expect(screen.getByText("Oops! Looks like your are not logged in.")).toBeInTheDocument();
    expect(screen.getByText("Please click here to SignIn")).toBeInTheDocument();
  });
});