// TodaysStocks.test.jsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import TodaysStocks from '../TodaysStocks';

const mockFetch = vi.fn();

global.fetch = mockFetch;

const dummyData = {
  gainers: [
    { stockname: 'Stock A', stocksymbol: 'A', price: 100, change: 5 },
    { stockname: 'Stock B', stocksymbol: 'B', price: 200, change: 10 },
  ],
  losers: [
    { stockname: 'Stock C', stocksymbol: 'C', price: 50, change: -5 },
    { stockname: 'Stock D', stocksymbol: 'D', price: 150, change: -10 },
  ],
  mostActive: [
    { stockname: 'Stock E', stocksymbol: 'E', price: 300, change: 0 },
    { stockname: 'Stock F', stocksymbol: 'F', price: 400, change: 15 },
  ],
};

describe('TodaysStocks', () => {
  const mockStore = configureStore();
  const initialState = { theme: { isDarkMode: false } };
  const store = mockStore(initialState);

  beforeEach(() => {
    mockFetch.mockResolvedValueOnce({
      json: async () => dummyData,
    });
  });

  it('renders correctly and fetches data', async () => {
    render(
      <Provider store={store}>
        <TodaysStocks />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText(/Today's stocks/i)).toBeInTheDocument();
    });

    expect(screen.getByText('Stock A')).toBeInTheDocument();
    expect(screen.getByText('Stock B')).toBeInTheDocument();
  });

  it('displays gainers by default', async () => {
    render(
      <Provider store={store}>
        <TodaysStocks />
      </Provider>
    );

    await waitFor(() => {
      expect(screen.getByText('Stock A')).toBeInTheDocument();
    });
  });

  it('displays losers when Losers button is clicked', async () => {
    render(
      <Provider store={store}>
        <TodaysStocks />
      </Provider>
    );

    fireEvent.click(screen.getByText(/Losers/i));

    await waitFor(() => {
      expect(screen.getByText('Stock C')).toBeInTheDocument();
      expect(screen.getByText('Stock D')).toBeInTheDocument();
    });
  });

  it('displays most active stocks when Most Active button is clicked', async () => {
    render(
      <Provider store={store}>
        <TodaysStocks />
      </Provider>
    );

    fireEvent.click(screen.getByText(/Most Active/i));

    await waitFor(() => {
      expect(screen.getByText('Stock E')).toBeInTheDocument();
      expect(screen.getByText('Stock F')).toBeInTheDocument();
    });
  });
});