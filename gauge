import React from 'react';
import { render, screen } from '@testing-library/react';
import '@testing-library/jest-dom';
import { describe, it, expect } from 'vitest';
import ChartDisplay from './ChartDisplay';

describe('ChartDisplay Component', () => {
  const mockData = [
    { date: '2021-07-01', value: 1000 },
    { date: '2021-08-01', value: 1200 },
    { date: '2021-09-01', value: 1400 },
  ];

  const mockPortfolio = {
    worth: 15000,
  };

  it('renders the Portfolio Performance title', () => {
    render(<ChartDisplay data={mockData} portfolio={mockPortfolio} />);
    expect(screen.getByText(/Portfolio Performance/i)).toBeInTheDocument();
  });

  it('renders the portfolio worth', () => {
    render(<ChartDisplay data={mockData} portfolio={mockPortfolio} />);
    expect(screen.getByText(`$${mockPortfolio.worth}`)).toBeInTheDocument();
  });

  it('renders the performance change text', () => {
    render(<ChartDisplay data={mockData} portfolio={mockPortfolio} />);
    expect(screen.getByText('+230.82% from July 2021')).toBeInTheDocument();
  });

  it('renders the Line chart', () => {
    render(<ChartDisplay data={mockData} portfolio={mockPortfolio} />);
    // Check if the canvas element (which is used by the chart) is present
    expect(screen.getByRole('img')).toBeInTheDocument();
  });

  it('checks chart data labels and datasets', () => {
    render(<ChartDisplay data={mockData} portfolio={mockPortfolio} />);
    const chartInstance = ChartJS.instances[0];
    
    expect(chartInstance.data.labels).toEqual(mockData.map(entry => entry.date));
    expect(chartInstance.data.datasets[0].data).toEqual(mockData.map(entry => entry.value));
  });

  it('checks chart options for correct axis titles', () => {
    render(<ChartDisplay data={mockData} portfolio={mockPortfolio} />);
    const chartInstance = ChartJS.instances[0];
    
    expect(chartInstance.options.scales.x.title.text).toBe('Date');
    expect(chartInstance.options.scales.y.title.text).toBe('Value (USD)');
  });
});