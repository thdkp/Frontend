 import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { MemoryRouter, Route, Routes } from 'react-router-dom';
import configureStore from 'redux-mock-store';
import PortfolioDetail from './PortfolioDetail';
import { selectIsDarkMode } from '../../redux/slices/themeSlice';
import { vi } from 'vitest';

// Mock the necessary redux slice selector and other modules
vi.mock('../../redux/slices/themeSlice', () => ({
  selectIsDarkMode: vi.fn(),
}));

vi.mock('react-toastify', () => ({
  toast: {
    error: vi.fn(),
    success: vi.fn(),
  },
}));

const mockStore = configureStore([]);

describe('PortfolioDetail', () => {
  let store;

  const renderComponent = (isDarkMode, isAuthenticated, initialEntries = ['/portfolio/1']) => {
    store = mockStore({
      auth: { isAuthenticated },
      theme: { isDarkMode },
    });
    selectIsDarkMode.mockReturnValue(isDarkMode);

    render(
      <Provider store={store}>
        <MemoryRouter initialEntries={initialEntries}>
          <Routes>
            <Route path="/portfolio/:id" element={<PortfolioDetail />} />
          </Routes>
        </MemoryRouter>
      </Provider>
    );
  };

  const mockPortfolioData = {
    portfolio: [{
      name: "Test Portfolio",
      stocks: [{ symbol: "AAPL", price: 150, change: 0 }],
      profitLoss: "10%",
      capital: 10000,
      worth: 11000,
      allocation: { "Stocks": "70%", "Bonds": "30%" },
      riskAppetite: 50,
    }]
  };

  beforeEach(() => {
    vi.spyOn(global, 'fetch').mockResolvedValueOnce({
      ok: true,
      json: async () => mockPortfolioData.portfolio,
    });
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  test('renders PortfolioDetail correctly in light mode', async () => {
    renderComponent(false, true);

    await waitFor(() => expect(screen.getByText('Stocks in')).toBeInTheDocument());
    expect(screen.getByText('Test Portfolio')).toBeInTheDocument();
    expect(screen.getByText('Rebalance Portfolio')).toBeInTheDocument();
    expect(screen.getByText('Profit/Loss: 10%')).toBeInTheDocument();
    expect(screen.getByText('Invested: 10000')).toBeInTheDocument();
    expect(screen.getByText('Portfolio Worth: 11000')).toBeInTheDocument();
  });

  test('renders PortfolioDetail correctly in dark mode', async () => {
    renderComponent(true, true);

    await waitFor(() => expect(screen.getByText('Stocks in')).toBeInTheDocument());
    expect(screen.getByText('Test Portfolio')).toBeInTheDocument();
    expect(screen.getByText('Rebalance Portfolio')).toBeInTheDocument();
    expect(screen.getByText('Profit/Loss: 10%')).toBeInTheDocument();
    expect(screen.getByText('Invested: 10000')).toBeInTheDocument();
    expect(screen.getByText('Portfolio Worth: 11000')).toBeInTheDocument();
  });

  test('handles unauthenticated user', () => {
    renderComponent(false, false);

    expect(screen.getByText('You need to log in to access this page.')).toBeInTheDocument();
  });

  test('handles rebalancing click', async () => {
    renderComponent(false, true);

    await waitFor(() => expect(screen.getByText('Rebalance Portfolio')).toBeInTheDocument());

    const openSpy = vi.spyOn(window, 'open').mockImplementation(() => null);

    fireEvent.click(screen.getByText('Rebalance Portfolio'));

    expect(openSpy).toHaveBeenCalledWith('/rebalance/1/undefined', '_blank');
    expect(screen.getByText('Please allow pop-ups for this website')).toBeInTheDocument();
  });

  test('handles accept action', async () => {
    renderComponent(false, true);

    await waitFor(() => expect(screen.getByText('Rebalance Portfolio')).toBeInTheDocument());

    vi.spyOn(global, 'fetch').mockResolvedValueOnce({
      ok: true,
      json: async () => 'Portfolio saved successfully',
    });

    fireEvent.click(screen.getByText('Accept'));

    await waitFor(() => expect(screen.getByText('Portfolio saved successfully')).toBeInTheDocument());
  });

  test('handles reject action', async () => {
    renderComponent(false, true);

    await waitFor(() => expect(screen.getByText('Rebalance Portfolio')).toBeInTheDocument());

    fireEvent.click(screen.getByText('Reject'));

    expect(screen.queryByText('Portfolio saved successfully')).not.toBeInTheDocument();
  });
});