import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { BrowserRouter as Router } from 'react-router-dom';
import { Provider } from 'react-redux';
import { createStore } from 'redux';
import MarketSectors from './MarketSectors'; // Adjust the path as necessary
import { vi } from 'vitest';

// Mock fetch
vi.stubGlobal('fetch', vi.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve({ stocks: dummyData }),
  })
));

const dummyData = [
  { stockname: 'NIFTY 50', price: 22550.40, change: 0.27, isPositive: true },
  { stockname: 'USD/INR', price: 83.52, change: 0.19, isPositive: true },
  { stockname: 'Gold', price: 7385.95, change: -0.07, isPositive: false },
  { stockname: 'NIFTY 100 Largecap', price: 23538.60, change: 0.31, isPositive: true },
  { stockname: 'NIFTY 100 Midcap', price: 51735.95, change: 0.60, isPositive: true },
  { stockname: 'NIFTY 100 Smallcap', price: 16710.25, change: 0.59, isPositive: true },
  { stockname: 'NIFTY Bank', price: 48982.40, change: 0.62, isPositive: true },
  { stockname: 'NIFTY IT', price: 32458.85, change: -1.06, isPositive: false },
  { stockname: 'NIFTY Pharma', price: 18849.70, change: -0.64, isPositive: false },
];

const renderWithProviders = (ui, { reduxState } = {}) => {
  const store = createStore(() => reduxState || { theme: { isDarkMode: false } });
  return render(
    <Provider store={store}>
      <Router>{ui}</Router>
    </Provider>
  );
};

describe('MarketSectors component', () => {
  test('renders MarketSectors component', async () => {
    renderWithProviders(<MarketSectors />);
    
    await waitFor(() => {
      expect(screen.getByText(/Stocks/i)).toBeInTheDocument();
    });
    
    expect(screen.getByText(/See All/i)).toBeInTheDocument();
  });

  test('fetches and displays stock data', async () => {
    renderWithProviders(<MarketSectors />);
    
    await waitFor(() => {
      dummyData.forEach(item => {
        expect(screen.getByText(item.stockname)).toBeInTheDocument();
        expect(screen.getByText(item.price.toFixed(2))).toBeInTheDocument();
        expect(screen.getByText(item.change > 0 ? `▲ ${item.change.toFixed(2)}%` : `▼ ${item.change.toFixed(2)}%`)).toBeInTheDocument();
      });
    });
  });

  test('renders dark mode correctly', async () => {
    renderWithProviders(<MarketSectors />, {
      reduxState: { theme: { isDarkMode: true } },
    });

    await waitFor(() => {
      expect(screen.getByText(/Stocks/i)).toHaveClass('text-white');
    });

    dummyData.forEach(item => {
      expect(screen.getByText(item.stockname)).toBeInTheDocument();
      expect(screen.getByText(item.price.toFixed(2))).toBeInTheDocument();
      expect(screen.getByText(item.change > 0 ? `▲ ${item.change.toFixed(2)}%` : `▼ ${item.change.toFixed(2)}%`)).toBeInTheDocument();
    });
  });

  test('renders light mode correctly', async () => {
    renderWithProviders(<MarketSectors />, {
      reduxState: { theme: { isDarkMode: false } },
    });

    await waitFor(() => {
      expect(screen.getByText(/Stocks/i)).toHaveClass('text-black');
    });

    dummyData.forEach(item => {
      expect(screen.getByText(item.stockname)).toBeInTheDocument();
      expect(screen.getByText(item.price.toFixed(2))).toBeInTheDocument();
      expect(screen.getByText(item.change > 0 ? `▲ ${item.change.toFixed(2)}%` : `▼ ${item.change.toFixed(2)}%`)).toBeInTheDocument();
    });
  });

  test('renders See All link', () => {
    renderWithProviders(<MarketSectors />);
    
    expect(screen.getByText(/See All/i)).toBeInTheDocument();
    expect(screen.getByText(/See All/i)).toHaveAttribute('href', '/stockuniverse');
  });
});