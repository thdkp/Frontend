import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import CreateNews from '../components/CreateNews';
import '@testing-library/jest-dom/extend-expect';

vi.mock('../../notification/notifyError', () => ({
  default: vi.fn(),
}));

vi.mock('../../notification/notifySuccess', () => ({
  default: vi.fn(),
}));

global.fetch = vi.fn();

describe('CreateNews Component', () => {
  beforeEach(() => {
    fetch.mockClear();
    vi.resetAllMocks();
  });

  it('renders without crashing', () => {
    render(<CreateNews />);
    expect(screen.getByText('Create News')).toBeInTheDocument();
    expect(screen.getByLabelText('Stock Symbol')).toBeInTheDocument();
    expect(screen.getByLabelText('Headline')).toBeInTheDocument();
    expect(screen.getByLabelText('Description')).toBeInTheDocument();
    expect(screen.getByLabelText('Affects Stock Negatively?')).toBeInTheDocument();
    expect(screen.getByText('Create News')).toBeInTheDocument();
  });

  it('updates input fields correctly', () => {
    render(<CreateNews />);

    const stockSymbolInput = screen.getByLabelText('Stock Symbol');
    const headlineInput = screen.getByLabelText('Headline');
    const descriptionInput = screen.getByLabelText('Description');
    const affectStockCheckbox = screen.getByLabelText('Affects Stock Negatively?');

    fireEvent.change(stockSymbolInput, { target: { value: 'AAPL' } });
    fireEvent.change(headlineInput, { target: { value: 'Apple stocks rise' } });
    fireEvent.change(descriptionInput, { target: { value: 'Apple stocks have seen a significant rise today.' } });
    fireEvent.click(affectStockCheckbox);

    expect(stockSymbolInput.value).toBe('AAPL');
    expect(headlineInput.value).toBe('Apple stocks rise');
    expect(descriptionInput.value).toBe('Apple stocks have seen a significant rise today.');
    expect(affectStockCheckbox.checked).toBe(true);
  });

  it('submits the form and shows success notification', async () => {
    fetch.mockResolvedValueOnce({ ok: true });
    const notifySuccess = (await import('../../notification/notifySuccess')).default;
    const notifyError = (await import('../../notification/notifyError')).default;

    render(<CreateNews />);

    const stockSymbolInput = screen.getByLabelText('Stock Symbol');
    const headlineInput = screen.getByLabelText('Headline');
    const descriptionInput = screen.getByLabelText('Description');
    const affectStockCheckbox = screen.getByLabelText('Affects Stock Negatively?');
    const submitButton = screen.getByText('Create News');

    fireEvent.change(stockSymbolInput, { target: { value: 'AAPL' } });
    fireEvent.change(headlineInput, { target: { value: 'Apple stocks rise' } });
    fireEvent.change(descriptionInput, { target: { value: 'Apple stocks have seen a significant rise today.' } });
    fireEvent.click(affectStockCheckbox);
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(fetch).toHaveBeenCalledWith(
        `${import.meta.env.VITE_BACKEND_URL}/news/create`,
        expect.objectContaining({
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'accesstoken': sessionStorage.getItem('accessToken') },
          body: JSON.stringify({
            stockSymbol: 'AAPL',
            headline: 'Apple stocks rise',
            description: 'Apple stocks have seen a significant rise today.',
            affectStock: true,
          }),
        })
      );
      expect(notifySuccess).toHaveBeenCalledWith('News created successfully!');
    });

    expect(stockSymbolInput.value).toBe('');
    expect(headlineInput.value).toBe('');
    expect(descriptionInput.value).toBe('');
    expect(affectStockCheckbox.checked).toBe(false);
  });

  it('shows error notification on form submission failure', async () => {
    fetch.mockResolvedValueOnce({ ok: false });
    const notifySuccess = (await import('../../notification/notifySuccess')).default;
    const notifyError = (await import('../../notification/notifyError')).default;

    render(<CreateNews />);

    const stockSymbolInput = screen.getByLabelText('Stock Symbol');
    const headlineInput = screen.getByLabelText('Headline');
    const descriptionInput = screen.getByLabelText('Description');
    const affectStockCheckbox = screen.getByLabelText('Affects Stock Negatively?');
    const submitButton = screen.getByText('Create News');

    fireEvent.change(stockSymbolInput, { target: { value: 'AAPL' } });
    fireEvent.change(headlineInput, { target: { value: 'Apple stocks rise' } });
    fireEvent.change(descriptionInput, { target: { value: 'Apple stocks have seen a significant rise today.' } });
    fireEvent.click(affectStockCheckbox);
    fireEvent.click(submitButton);

    await waitFor(() => {
      expect(fetch).toHaveBeenCalledWith(
        `${import.meta.env.VITE_BACKEND_URL}/news/create`,
        expect.objectContaining({
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'accesstoken': sessionStorage.getItem('accessToken') },
          body: JSON.stringify({
            stockSymbol: 'AAPL',
            headline: 'Apple stocks rise',
            description: 'Apple stocks have seen a significant rise today.',
            affectStock: true,
          }),
        })
      );
      expect(notifyError).toHaveBeenCalledWith('Failed to create news.');
    });
  });
});