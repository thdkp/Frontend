import React from 'react';
import { render, fireEvent } from '@testing-library/react';
import { useSelector } from 'react-redux';
import PortfolioDiversity from './PortfolioDiversity';
import AllocationView from './AllocationView';
import BondEquity from './BondEquity';
import AssetClass from './AssetClass';
import AuthError from './AuthError';

// Mock the child components and Redux hook
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
}));

jest.mock('./AllocationView', () => jest.fn(() => <div>Allocation View</div>));
jest.mock('./BondEquity', () => jest.fn(() => <div>Bond Equity View</div>));
jest.mock('./AssetClass', () => jest.fn(() => <div>Asset Class View</div>));
jest.mock('./AuthError', () => jest.fn(() => <div>Auth Error</div>));

describe('PortfolioDiversity', () => {
  beforeEach(() => {
    useSelector.mockImplementation((selector) => {
      if (selector === (state) => state.auth) {
        return { isAuthenticated: true };
      }
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the component correctly when authenticated', () => {
    const { getByText } = render(<PortfolioDiversity portfolio={{ allocation: [], bondEquity: [], assetClass: [] }} />);

    expect(getByText('Portfolio Diversity')).toBeInTheDocument();
    expect(getByText('Allocation View')).toBeInTheDocument();
    expect(getByText('Bond Equity')).toBeInTheDocument();
    expect(getByText('Asset Class')).toBeInTheDocument();
    expect(getByText('Allocation View')).toBeInTheDocument(); // Default view
  });

  it('switches views when buttons are clicked', () => {
    const { getByText } = render(<PortfolioDiversity portfolio={{ allocation: [], bondEquity: [], assetClass: [] }} />);

    fireEvent.click(getByText('Bond Equity'));
    expect(getByText('Bond Equity View')).toBeInTheDocument();

    fireEvent.click(getByText('Asset Class'));
    expect(getByText('Asset Class View')).toBeInTheDocument();

    fireEvent.click(getByText('Allocation View'));
    expect(getByText('Allocation View')).toBeInTheDocument();
  });

  it('renders AuthError component when not authenticated', () => {
    useSelector.mockImplementation((selector) => {
      if (selector === (state) => state.auth) {
        return { isAuthenticated: false };
      }
    });

    const { getByText } = render(<PortfolioDiversity portfolio={{}} />);

    expect(getByText('Auth Error')).toBeInTheDocument();
  });
});

.......
// PortfolioDiversity.test.js
import React from 'react';
import { render, screen } from '@testing-library/react';
import PortfolioDiversity from './PortfolioDiversity';

describe('PortfolioDiversity', () => {
  test('renders correctly', () => {
    // Mocked portfolio data
    const portfolioData = {
      allocation: [
        { category: 'Stocks', percentage: 50 },
        { category: 'Bonds', percentage: 30 },
        { category: 'Cash', percentage: 20 },
      ],
    };

    // Render the component with mocked data
    render(<PortfolioDiversity portfolio={portfolioData} />);

    // Assertions
    expect(screen.getByText('Portfolio Diversity')).toBeInTheDocument();
    expect(screen.getByText('Allocation View')).toBeInTheDocument();
    // Add more assertions based on your component's behavior
  });
});
........

 ,,,,,,,

import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import PortfolioDiversity from './PortfolioDiversity'; // Adjust the import path as needed
import { vi } from 'vitest';

describe('PortfolioDiversity component', () => {
  const mockPortfolio = {
    allocation: [
      { category: 'Stocks', percentage: 60 },
      { category: 'Bonds', percentage: 40 }
    ],
    bondEquity: [
      { category: 'Government Bonds', percentage: 30 },
      { category: 'Corporate Bonds', percentage: 10 }
    ],
    assetClass: [
      { category: 'Equities', percentage: 50 },
      { category: 'Fixed Income', percentage: 30 },
      { category: 'Cash', percentage: 20 }
    ]
  };

  const mockUser = {
    id: 1,
    name: 'John Doe',
    email: 'john.doe@example.com'
  };

  let mockStore, notAuthenticatedStore;

  beforeEach(() => {
    mockStore = {
      getState: () => ({
        auth: {
          isAuthenticated: true,
          user: mockUser
        }
      }),
      subscribe: () => {},
      dispatch: () => {}
    };

    notAuthenticatedStore = {
      getState: () => ({
        auth: {
          isAuthenticated: false,
          user: null
        }
      }),
      subscribe: () => {},
      dispatch: () => {}
    };

    vi.mock('react-redux', () => ({
      Provider: ({ children }) => <>{children}</>,
      useSelector: (selector) => selector(mockStore.getState()),
      useDispatch: () => mockStore.dispatch,
    }));
  });

  it('renders AllocationView by default when authenticated', () => {
    render(
      <Provider store={mockStore}>
        <PortfolioDiversity portfolio={mockPortfolio} />
      </Provider>
    );

    // Check if AllocationView is rendered by default
    expect(screen.getByText('Allocation View')).toBeInTheDocument();
    expect(screen.getByText('Stocks')).toBeInTheDocument();
    expect(screen.getByText('Bonds')).toBeInTheDocument();
    expect(screen.queryByText('Government Bonds')).not.toBeInTheDocument(); // BondEquity and AssetClass views are not shown
  });

  it('switches views correctly on button click', () => {
    render(
      <Provider store={mockStore}>
        <PortfolioDiversity portfolio={mockPortfolio} />
      </Provider>
    );

    // Click on Bond Equity view button and check if BondEquity view is rendered
    const bondEquityButton = screen.getByText('Bond Equity');
    fireEvent.click(bondEquityButton);

    expect(screen.getByText('Bond Equity')).toBeInTheDocument();
    expect(screen.getByText('Government Bonds')).toBeInTheDocument();
    expect(screen.getByText('Corporate Bonds')).toBeInTheDocument();
    expect(screen.queryByText('Stocks')).not.toBeInTheDocument(); // AllocationView and AssetClass views are not shown
  });

  it('renders authentication error when not authenticated', () => {
    render(
      <Provider store={notAuthenticatedStore}>
        <PortfolioDiversity portfolio={mockPortfolio} />
      </Provider>
    );

    // Check if authentication error component is rendered
    expect(screen.getByText('Authentication Error')).toBeInTheDocument();
  });

  // Add more tests as needed for interactions, navigation, etc.
}); 