// __tests__/Home.test.jsx
import React from 'react';
import { render, screen } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { MemoryRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import Home from '../Home';
import themeReducer, { selectIsDarkMode } from '../redux/slices/themeSlice';
import authReducer from '../redux/slices/authSlice';

vi.mock('react-redux', async () => {
  const actual = await vi.importActual('react-redux');
  return {
    ...actual,
    useSelector: vi.fn(),
  };
});

describe('Home Component', () => {
  const mockState = {
    theme: {
      isDarkMode: false,
    },
    auth: {
      isAuthenticated: true,
      user: { id: 1, name: 'Test User' },
    },
  };

  const renderWithProviders = (ui, { preloadedState = mockState, store = configureStore({
      reducer: { theme: themeReducer, auth: authReducer },
      preloadedState,
    }), ...renderOptions } = {}) => {
    const Wrapper = ({ children }) => (
      <Provider store={store}>
        <MemoryRouter>
          {children}
        </MemoryRouter>
      </Provider>
    );
    return render(ui, { wrapper: Wrapper, ...renderOptions });
  };

  it('renders child components correctly', () => {
    renderWithProviders(<Home />);

    expect(screen.getByText(/Market Status/i)).toBeInTheDocument();
    expect(screen.getByText(/Market Sectors/i)).toBeInTheDocument();
    expect(screen.getByText(/Get Started/i)).toBeInTheDocument();
    expect(screen.getByText(/Today's Stocks/i)).toBeInTheDocument();
    expect(screen.getByText(/News/i)).toBeInTheDocument();
  });

  it('renders correctly in dark mode', () => {
    const darkModeState = {
      ...mockState,
      theme: {
        isDarkMode: true,
      },
    };

    renderWithProviders(<Home />, { preloadedState: darkModeState });

    const container = screen.getByTestId('container');
    expect(container).toHaveClass('dark:bg-gray-900');
  });

  it('renders correctly in light mode', () => {
    renderWithProviders(<Home />);

    const container = screen.getByTestId('container');
    expect(container).toHaveClass('bg-gray-100');
  });
});