import React from 'react';
import { render, screen } from '@testing-library/react';
import { useSelector } from 'react-redux';
import PortfolioDiversity from './PortfolioDiversity';
import { vi } from 'vitest';

// Mock the Redux selector
vi.mock('react-redux', () => ({
  ...vi.importActual('react-redux'),
  useSelector: vi.fn(),
}));

// Mock the child components
vi.mock('./AllocationView', () => ({
  __esModule: true,
  default: ({ data }) => <div>Mocked AllocationView with data: {JSON.stringify(data)}</div>,
}));

vi.mock('../utils/AuthError', () => ({
  __esModule: true,
  default: () => <div>Mocked AuthError</div>,
}));

describe('PortfolioDiversity', () => {
  beforeEach(() => {
    useSelector.mockImplementation(callback => callback({
      auth: {
        isAuthenticated: true,
      },
      theme: {
        isDarkMode: false,
      },
    }));
  });

  afterEach(() => {
    vi.clearAllMocks();
  });

  test('renders AllocationView when authenticated', () => {
    const portfolio = { allocation: 'mockedAllocationData' };

    render(<PortfolioDiversity portfolio={portfolio} />);

    expect(screen.getByText('Mocked AllocationView with data: "mockedAllocationData"')).toBeInTheDocument();
  });

  test('renders AuthError when not authenticated', () => {
    useSelector.mockImplementation(callback => callback({
      auth: {
        isAuthenticated: false,
      },
      theme: {
        isDarkMode: false,
      },
    }));

    render(<PortfolioDiversity portfolio={{}} />);

    expect(screen.getByText('Mocked AuthError')).toBeInTheDocument();
  });

  test('applies dark mode styles correctly', () => {
    useSelector.mockImplementation(callback => callback({
      auth: {
        isAuthenticated: true,
      },
      theme: {
        isDarkMode: true,
      },
    }));

    const { container } = render(<PortfolioDiversity portfolio={{}} />);

    expect(container.firstChild).toHaveClass('bg gray 800');
  });

  test('applies light mode styles correctly', () => {
    useSelector.mockImplementation(callback => callback({
      auth: {
        isAuthenticated: true,
      },
      theme: {
        isDarkMode: false,
      },
    }));

    const { container } = render(<PortfolioDiversity portfolio={{}} />);

    expect(container.firstChild).toHaveClass('bg white');
  });
});