// Navbar.test.jsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import { BrowserRouter } from 'react-router-dom';
import { Provider } from 'react-redux';
import configureStore from 'redux-mock-store';
import Navbar from './Navbar';

// Create a mock store
const mockStore = configureStore([]);
const store = mockStore({
  auth: {
    isAuthenticated: true,
    user: { firstName: 'John' },
  },
  theme: {
    isDarkMode: false,
  },
});

describe('Navbar Component', () => {
  test('renders Navbar component correctly', () => {
    render(
      <Provider store={store}>
        <BrowserRouter>
          <Navbar />
        </BrowserRouter>
      </Provider>
    );

    // Check if the mobile navbar is displayed
    const mobileNavbar = screen.getByTestId('mobile-navbar');
    expect(mobileNavbar).toBeInTheDocument();

    // Check if the desktop navbar is displayed
    const desktopNavbar = screen.getByTestId('desktop-navbar');
    expect(desktopNavbar).toBeInTheDocument();

    // Check if the WELLS FARGO text is displayed
    const brandText = screen.getByText(/WELLS FARGO/i);
    expect(brandText).toBeInTheDocument();

    // Check if the hamburger menu button is displayed
    const hamburgerButton = screen.getByTestId('hamburger-button');
    expect(hamburgerButton).toBeInTheDocument();
  });

  test('toggles mobile menu when hamburger button is clicked', () => {
    render(
      <Provider store={store}>
        <BrowserRouter>
          <Navbar />
        </BrowserRouter>
      </Provider>
    );

    // Check if the hamburger menu button is displayed
    const hamburgerButton = screen.getByTestId('hamburger-button');
    expect(hamburgerButton).toBeInTheDocument();

    // Click the hamburger button
    fireEvent.click(hamburgerButton);

    // Check if the cross button is displayed
    const crossButton = screen.getByTestId('cross-button');
    expect(crossButton).toBeInTheDocument();
  });

  test('toggles dark mode when dark mode button is clicked', () => {
    render(
      <Provider store={store}>
        <BrowserRouter>
          <Navbar />
        </BrowserRouter>
      </Provider>
    );

    // Check if the dark mode button is displayed
    const darkModeButton = screen.getByTestId('dark-mode-button');
    expect(darkModeButton).toBeInTheDocument();

    // Click the dark mode button
    fireEvent.click(darkModeButton);

    // Check if the dark mode button toggled
    expect(store.getActions()).toContainEqual({ type: 'theme/toggleTheme' });
  });
});



.................
import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect';
import { BrowserRouter as Router } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { Navbar } from './Navbar'; // Adjust the path as necessary

// Mock the useSelector and useDispatch hooks
jest.mock('react-redux', () => ({
  useSelector: jest.fn(),
  useDispatch: jest.fn(),
}));

describe('Navbar', () => {
  const mockDispatch = jest.fn();

  beforeEach(() => {
    useDispatch.mockReturnValue(mockDispatch);
    useSelector.mockImplementation((selector) => {
      if (selector === (state) => state.auth) {
        return { isAuthenticated: true, user: { firstName: 'John' } };
      } else if (selector === (state) => state.theme.isDarkMode) {
        return true;
      }
    });
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  it('renders the navbar correctly', () => {
    render(
      <Router>
        <Navbar />
      </Router>
    );

    expect(screen.getByText('WELLS FARGO')).toBeInTheDocument();
    expect(screen.getByText('Home')).toBeInTheDocument();
    expect(screen.getByText('Portfolio')).toBeInTheDocument();
    expect(screen.getByText('Logout')).toBeInTheDocument();
  });

  it('toggles the dark mode', () => {
    render(
      <Router>
        <Navbar />
      </Router>
    );

    const darkModeButton = screen.getByRole('button', { name: /darkmode/i });
    fireEvent.click(darkModeButton);
    expect(mockDispatch).toHaveBeenCalledWith(expect.any(Function));
  });

  it('opens and closes the mobile menu', () => {
    render(
      <Router>
        <Navbar />
      </Router>
    );

    const menuButton = screen.getByRole('button', { name: /hamburgermenu/i });
    fireEvent.click(menuButton);
    expect(screen.getByText('Home')).toBeVisible();
    expect(screen.getByText('Portfolio')).toBeVisible();
    expect(screen.getByText('Logout')).toBeVisible();

    const closeButton = screen.getByRole('button', { name: /cross/i });
    fireEvent.click(closeButton);
    expect(screen.queryByText('Home')).not.toBeVisible();
  });
});
    