import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter as Router } from 'react-router-dom';
import { createStore } from 'redux';
import Portfolio from './Portfolio'; // Adjust the path as necessary
import { vi } from 'vitest';

// Mock fetch
vi.stubGlobal('fetch', vi.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve(dummyData),
  })
));

const dummyData = [
  { portfolioid: 1, name: 'Tech Stocks', value: 10000 },
  { portfolioid: 2, name: 'Energy Stocks', value: 8000 },
];

const renderWithProviders = (ui, { reduxState } = {}) => {
  const store = createStore(() => reduxState || { theme: { isDarkMode: false }, auth: { isAuthenticated: true, user: { name: 'John Doe' } } });
  return render(
    <Provider store={store}>
      <Router>{ui}</Router>
    </Provider>
  );
};

describe('Portfolio component', () => {
  test('renders Portfolio component for authenticated user', async () => {
    renderWithProviders(<Portfolio />);
    
    await waitFor(() => {
      expect(screen.getByText(/Tech Stocks/i)).toBeInTheDocument();
      expect(screen.getByText(/Energy Stocks/i)).toBeInTheDocument();
    });
  });

  test('displays AuthError for unauthenticated user', () => {
    renderWithProviders(<Portfolio />, {
      reduxState: { auth: { isAuthenticated: false } },
    });
    
    expect(screen.getByText(/You are not authorized to view this page/i)).toBeInTheDocument();
  });

  test('renders Portfolio component in dark mode', async () => {
    renderWithProviders(<Portfolio />, {
      reduxState: { theme: { isDarkMode: true }, auth: { isAuthenticated: true, user: { name: 'John Doe' } } },
    });
    
    await waitFor(() => {
      expect(screen.getByText(/Tech Stocks/i)).toBeInTheDocument();
      expect(screen.getByText(/Energy Stocks/i)).toBeInTheDocument();
    });

    expect(screen.getByTestId('portfolio-container')).toHaveClass('bg-black');
  });

  test('renders Portfolio component in light mode', async () => {
    renderWithProviders(<Portfolio />, {
      reduxState: { theme: { isDarkMode: false }, auth: { isAuthenticated: true, user: { name: 'John Doe' } } },
    });
    
    await waitFor(() => {
      expect(screen.getByText(/Tech Stocks/i)).toBeInTheDocument();
      expect(screen.getByText(/Energy Stocks/i)).toBeInTheDocument();
    });

    expect(screen.getByTestId('portfolio-container')).toHaveClass('bg-gray-100');
  });

  test('renders PortfolioDiversity component when a portfolio is selected', async () => {
    renderWithProviders(<Portfolio />);
    
    await waitFor(() => {
      const techStocksElement = screen.getByText(/Tech Stocks/i);
      techStocksElement.click();
      
      expect(screen.getByText(/Diversity Details for Tech Stocks/i)).toBeInTheDocument();
    });
  });
});


..



import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { Provider } from 'react-redux';
import { BrowserRouter as Router } from 'react-router-dom';
import { createStore } from 'redux';
import Portfolio from './Portfolio'; // Adjust the path as necessary
import { vi } from 'vitest';

// Mock fetch
vi.stubGlobal('fetch', vi.fn(() =>
  Promise.resolve({
    json: () => Promise.resolve(dummyData),
  })
));

const dummyData = [
  { portfolioid: 1, name: 'Tech Stocks', value: 10000 },
  { portfolioid: 2, name: 'Energy Stocks', value: 8000 },
];

// Mock the AuthError component
vi.mock('./AuthError', () => ({
  __esModule: true,
  default: () => <div>You are not authorized to view this page</div>,
}));

// Mock the PortfolioDiversity component
vi.mock('./PortfolioDiversity', () => ({
  __esModule: true,
  default: () => <div>Diversity Details for Tech Stocks</div>,
}));

const renderWithProviders = (ui, { reduxState } = {}) => {
  const store = createStore(() => reduxState || { theme: { isDarkMode: false }, auth: { isAuthenticated: true, user: { name: 'John Doe' } } });
  return render(
    <Provider store={store}>
      <Router>{ui}</Router>
    </Provider>
  );
};

describe('Portfolio component', () => {
  test('renders Portfolio component for authenticated user', async () => {
    renderWithProviders(<Portfolio />);
    
    await waitFor(() => {
      expect(screen.getByText(/Tech Stocks/i)).toBeInTheDocument();
      expect(screen.getByText(/Energy Stocks/i)).toBeInTheDocument();
    });
  });

  test('displays AuthError for unauthenticated user', () => {
    renderWithProviders(<Portfolio />, {
      reduxState: { auth: { isAuthenticated: false } },
    });
    
    expect(screen.getByText(/You are not authorized to view this page/i)).toBeInTheDocument();
  });

  test('renders Portfolio component in dark mode', async () => {
    renderWithProviders(<Portfolio />, {
      reduxState: { theme: { isDarkMode: true }, auth: { isAuthenticated: true, user: { name: 'John Doe' } } },
    });
    
    await waitFor(() => {
      expect(screen.getByText(/Tech Stocks/i)).toBeInTheDocument();
      expect(screen.getByText(/Energy Stocks/i)).toBeInTheDocument();
    });

    expect(screen.getByTestId('portfolio-container')).toHaveClass('bg-black');
  });

  test('renders Portfolio component in light mode', async () => {
    renderWithProviders(<Portfolio />, {
      reduxState: { theme: { isDarkMode: false }, auth: { isAuthenticated: true, user: { name: 'John Doe' } } },
    });
    
    await waitFor(() => {
      expect(screen.getByText(/Tech Stocks/i)).toBeInTheDocument();
      expect(screen.getByText(/Energy Stocks/i)).toBeInTheDocument();
    });

    expect(screen.getByTestId('portfolio-container')).toHaveClass('bg-gray-100');
  });

  test('renders PortfolioDiversity component when a portfolio is selected', async () => {
    renderWithProviders(<Portfolio />);
    
    await waitFor(() => {
      const techStocksElement = screen.getByText(/Tech Stocks/i);
      techStocksElement.click();
      
      expect(screen.getByText(/Diversity Details for Tech Stocks/i)).toBeInTheDocument();
    });
  });
});