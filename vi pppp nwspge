// __tests__/NewsPage.test.jsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { Provider } from 'react-redux';
import { configureStore } from '@reduxjs/toolkit';
import NewsPage from '../NewsPage';
import themeReducer, { selectIsDarkMode } from '../redux/slices/themeSlice';

vi.mock('react-redux', async () => {
  const actual = await vi.importActual('react-redux');
  return {
    ...actual,
    useSelector: vi.fn(),
  };
});

describe('NewsPage Component', () => {
  const mockState = {
    theme: {
      isDarkMode: false,
    },
  };

  const renderWithProviders = (
    ui,
    {
      preloadedState = mockState,
      store = configureStore({
        reducer: { theme: themeReducer },
        preloadedState,
      }),
      ...renderOptions
    } = {}
  ) => {
    const Wrapper = ({ children }) => (
      <Provider store={store}>
        {children}
      </Provider>
    );
    return render(ui, { wrapper: Wrapper, ...renderOptions });
  };

  it('renders the news data correctly', async () => {
    renderWithProviders(<NewsPage />);

    expect(screen.getByText(/News/i)).toBeInTheDocument();
    expect(screen.getByText(/Apple releases new iPhone/i)).toBeInTheDocument();
    expect(screen.getByText(/Tesla hits new production milestone/i)).toBeInTheDocument();
    expect(screen.getByText(/Amazon launches new delivery drone/i)).toBeInTheDocument();
  });

  it('renders correctly in dark mode', () => {
    const darkModeState = {
      ...mockState,
      theme: {
        isDarkMode: true,
      },
    };

    renderWithProviders(<NewsPage />, { preloadedState: darkModeState });

    const container = screen.getByTestId('container');
    expect(container).toHaveClass('bg-gray-900');
  });

  it('renders correctly in light mode', () => {
    renderWithProviders(<NewsPage />);

    const container = screen.getByTestId('container');
    expect(container).toHaveClass('bg-white');
  });

  it('paginates news correctly', () => {
    renderWithProviders(<NewsPage />);

    const nextButton = screen.getByText(/Next/i);
    const previousButton = screen.getByText(/Previous/i);

    expect(nextButton).toBeInTheDocument();
    expect(previousButton).toBeInTheDocument();

    fireEvent.click(nextButton);

    expect(screen.getByText(/Page 2 of 1/i)).toBeInTheDocument();

    fireEvent.click(previousButton);

    expect(screen.getByText(/Page 1 of 1/i)).toBeInTheDocument();
  });
});