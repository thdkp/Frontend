// PortfolioTable.test.jsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import PortfolioTable from './PortfolioTable';

describe('PortfolioTable', () => {
  const portfolios = [
    {
      portfolioid: 1,
      name: 'Portfolio 1',
      profitLoss: 1000,
      capital: 5000,
      worth: 6000,
      allocation: [{ category: 'Stocks', percentage: 50 }],
    },
    {
      portfolioid: 2,
      name: 'Portfolio 2',
      profitLoss: -500,
      capital: 3000,
      worth: 2500,
      allocation: [{ category: 'Bonds', percentage: 50 }],
    },
  ];

  test('renders portfolio table with search functionality', () => {
    render(<PortfolioTable portfolios={portfolios} onSelectPortfolio={() => {}} />);

    expect(screen.getByText('Portfolio Table')).toBeInTheDocument();
    expect(screen.getByText('Portfolio 1')).toBeInTheDocument();
    expect(screen.getByText('Portfolio 2')).toBeInTheDocument();

    fireEvent.change(screen.getByPlaceholderText('Search by name'), { target: { value: 'Portfolio 1' } });
    expect(screen.getByText('Portfolio 1')).toBeInTheDocument();
    expect(screen.queryByText('Portfolio 2')).not.toBeInTheDocument();
  });

  test('toggles expanded portfolio details', () => {
    render(<PortfolioTable portfolios={portfolios} onSelectPortfolio={() => {}} />);

    expect(screen.queryByText('Summary for Portfolio 1')).not.toBeInTheDocument();

    fireEvent.click(screen.getByText('Portfolio 1'));
    expect(screen.getByText('Summary for Portfolio 1')).toBeInTheDocument();

    fireEvent.click(screen.getByText('Portfolio 1'));
    expect(screen.queryByText('Summary for Portfolio 1')).not.toBeInTheDocument();
  });

  test('renders create new portfolio button when authenticated', () => {
    render(<PortfolioTable portfolios={[]} onSelectPortfolio={() => {}} />, { initialState: { auth: { isAuthenticated: true } } });

    expect(screen.getByText('Create new')).toBeInTheDocument();
  });

  test('renders AuthError when not authenticated', () => {
    render(<PortfolioTable portfolios={[]} onSelectPortfolio={() => {}} />, { initialState: { auth: { isAuthenticated: false } } });

    expect(screen.getByText('Please sign in to access your portfolios.')).toBeInTheDocument();
  });
});
.........
// PortfolioTable.tes
// PortfolioTable.test.jsx
import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { Provider } from 'react-redux';
import PortfolioTable from './PortfolioTable';

const mockStore = {
  getState: () => ({
    auth: { isAuthenticated: true },
  }),
  subscribe: () => {},
  dispatch: () => {},
};

jest.mock('react-redux', () => ({
  ...jest.requireActual('react-redux'),
  useSelector: jest.fn(),
}));

describe('PortfolioTable', () => {
  const portfolios = [
    {
      portfolioid: 1,
      name: 'Portfolio 1',
      profitLoss: 1000,
      capital: 5000,
      worth: 6000,
      allocation: { stocks: 50, bonds: 50 },
    },
    {
      portfolioid: 2,
      name: 'Portfolio 2',
      profitLoss: -500,
      capital: 3000,
      worth: 2500,
      allocation: { stocks: 70, bonds: 30 },
    },
  ];

  test('renders portfolio table with search functionality', () => {
    render(
      <Provider store={mockStore}>
        <PortfolioTable portfolios={portfolios} onSelectPortfolio={() => {}} />
      </Provider>
    );

    // Ensure table headers are rendered
    expect(screen.getByText('Portfolio Name')).toBeInTheDocument();
    expect(screen.getByText('Profit/Loss')).toBeInTheDocument();
    expect(screen.getByText('Invested')).toBeInTheDocument();
    expect(screen.getByText('Portfolio Worth')).toBeInTheDocument();

    // Ensure portfolio data is rendered
    expect(screen.getByText('Portfolio 1')).toBeInTheDocument();
    expect(screen.getByText('▲ 1000')).toBeInTheDocument();
    expect(screen.getByText('5000')).toBeInTheDocument();
    expect(screen.getByText('6000')).toBeInTheDocument();

    expect(screen.getByText('Portfolio 2')).toBeInTheDocument();
    expect(screen.getByText('▼ -500')).toBeInTheDocument();
    expect(screen.getByText('3000')).toBeInTheDocument();
    expect(screen.getByText('2500')).toBeInTheDocument();

    // Test search functionality
    fireEvent.change(screen.getByPlaceholderText('Search by name'), {
      target: { value: 'Portfolio 1' },
    });
    expect(screen.getByText('Portfolio 1')).toBeInTheDocument();
    expect(screen.queryByText('Portfolio 2')).not.toBeInTheDocument();
  });

  // Add more test cases as needed...
});